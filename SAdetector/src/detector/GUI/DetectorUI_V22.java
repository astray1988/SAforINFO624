/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package detector.GUI;
import detector.Util.TokenizeMachine;
import java.awt.Color;
import java.awt.Font;
import java.io.BufferedReader;
import twitter4j.*;
import twitter4j.conf.ConfigurationBuilder;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import twitter4j.json.DataObjectFactory;
/**
 *
 * @author CDVI
 */
public class DetectorUI_V22 extends javax.swing.JFrame {

    /**
     * Creates new form DetectorUI_V1
     */
    public DetectorUI_V22() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        CrawlerPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jResultTextArea = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        keywordTextField = new javax.swing.JTextField();
        jSearchButton = new javax.swing.JButton();
        jPauseButton = new javax.swing.JButton();
        SentimentAnalysisPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jMonitorTextArea = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        jStartAnalysisButton = new javax.swing.JButton();
        jModifyAnalyButton = new javax.swing.JButton();
        jRefreshButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jItemComboBox = new javax.swing.JComboBox();
        jTrainDataAnalyButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jNumberTextField = new javax.swing.JTextField();
        jPRAnalysisButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jSelectAlgrithmComboBox = new javax.swing.JComboBox();
        RetrivalPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton5 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jRetrivalResultTextArea = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("jSA");
        setResizable(false);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setAutoscrolls(true);
        jScrollPane2.setHorizontalScrollBar(null);

        jResultTextArea.setColumns(20);
        jResultTextArea.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        jResultTextArea.setLineWrap(true);
        jResultTextArea.setRows(5);
        jScrollPane2.setViewportView(jResultTextArea);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search Bar", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 0, 12), new java.awt.Color(204, 204, 255))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel1.setText("Keywords:");

        jSearchButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jSearchButton.setText("Search");
        jSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSearchButtonActionPerformed(evt);
            }
        });

        jPauseButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPauseButton.setText("Pause");
        jPauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPauseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(keywordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(jPauseButton)
                .addContainerGap())
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jPauseButton, jSearchButton});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPauseButton)
                            .addComponent(jSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(keywordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21))))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jPauseButton, jSearchButton});

        javax.swing.GroupLayout CrawlerPanelLayout = new javax.swing.GroupLayout(CrawlerPanel);
        CrawlerPanel.setLayout(CrawlerPanelLayout);
        CrawlerPanelLayout.setHorizontalGroup(
            CrawlerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 797, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        CrawlerPanelLayout.setVerticalGroup(
            CrawlerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CrawlerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Crawler", CrawlerPanel);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Analysis ");

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Monitor Panel", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel4.setToolTipText("");

        jMonitorTextArea.setColumns(20);
        jMonitorTextArea.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jMonitorTextArea.setLineWrap(true);
        jMonitorTextArea.setRows(5);
        jScrollPane3.setViewportView(jMonitorTextArea);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jStartAnalysisButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jStartAnalysisButton.setText("Analysis Start");
        jStartAnalysisButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jStartAnalysisButtonActionPerformed(evt);
            }
        });

        jModifyAnalyButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jModifyAnalyButton.setText("Modi Analy Start");
        jModifyAnalyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jModifyAnalyButtonActionPerformed(evt);
            }
        });

        jRefreshButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jRefreshButton.setText("Refresh");
        jRefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRefreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jStartAnalysisButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jModifyAnalyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jRefreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jStartAnalysisButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jModifyAnalyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRefreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("Description:");

        jScrollPane1.setAutoscrolls(true);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 17)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("We classified tweets collected by the crawler based on sentimental features. Then, creating statistic pie chart and bar chart. \n");
        jScrollPane1.setViewportView(jTextArea1);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Precision Analysis"));

        jItemComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "apple", "google", "microsoft", "twitter" }));

        jTrainDataAnalyButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTrainDataAnalyButton.setText("Analysis");
        jTrainDataAnalyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTrainDataAnalyButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("DataSet:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Retrieved data:");

        jPRAnalysisButton.setText("Precision and Recall Analy");
        jPRAnalysisButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPRAnalysisButtonActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Algrithm:");

        jSelectAlgrithmComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Weighted Algrithm", "Modified Weighted Algrithm" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTrainDataAnalyButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPRAnalysisButton))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel10))
                                .addGap(32, 32, 32)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSelectAlgrithmComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jItemComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jItemComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSelectAlgrithmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(73, 73, 73)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTrainDataAnalyButton, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(jPRAnalysisButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout SentimentAnalysisPanelLayout = new javax.swing.GroupLayout(SentimentAnalysisPanel);
        SentimentAnalysisPanel.setLayout(SentimentAnalysisPanelLayout);
        SentimentAnalysisPanelLayout.setHorizontalGroup(
            SentimentAnalysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SentimentAnalysisPanelLayout.createSequentialGroup()
                .addGroup(SentimentAnalysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SentimentAnalysisPanelLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SentimentAnalysisPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25)
                .addGroup(SentimentAnalysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        SentimentAnalysisPanelLayout.setVerticalGroup(
            SentimentAnalysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SentimentAnalysisPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(SentimentAnalysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(SentimentAnalysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SentimentAnalysisPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SentimentAnalysisPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(60, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Sentiment Analysis", SentimentAnalysisPanel);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jButton4.setText("Search");

        jLabel9.setText("Type terms or keywords here");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane6.setViewportView(jTextArea2);

        jButton5.setText("Add");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(20, 20, 20))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addGap(35, 35, 35)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton5)
                .addGap(34, 34, 34)
                .addComponent(jButton4)
                .addContainerGap())
        );

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("Retrival from Local");

        jRetrivalResultTextArea.setColumns(20);
        jRetrivalResultTextArea.setRows(5);
        jScrollPane5.setViewportView(jRetrivalResultTextArea);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5)
        );

        javax.swing.GroupLayout RetrivalPanelLayout = new javax.swing.GroupLayout(RetrivalPanel);
        RetrivalPanel.setLayout(RetrivalPanelLayout);
        RetrivalPanelLayout.setHorizontalGroup(
            RetrivalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RetrivalPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RetrivalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RetrivalPanelLayout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(RetrivalPanelLayout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        RetrivalPanelLayout.setVerticalGroup(
            RetrivalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RetrivalPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(RetrivalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(123, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Retrival data from local", RetrivalPanel);

        jLabel5.setFont(new java.awt.Font("Tempus Sans ITC", 1, 24)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("Sentimental Analysis Detector");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setIcon(new javax.swing.ImageIcon("C:\\Users\\CDVI\\SAdetector\\resources\\1369557797_zoom.png")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(337, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 802, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(675, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(83, 83, 83)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSearchButtonActionPerformed
            // TODO add your handling code here:
                new Thread(StartSearch).start();
            
                 
           
            
        
    }//GEN-LAST:event_jSearchButtonActionPerformed

    private void jPauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPauseButtonActionPerformed
        // TODO add your handling code here:
        if (running) { 
            jPauseButton.setText("Pause"); 
            try { 
                StartSearch.pauseThread();
            } catch (InterruptedException ex) {
                Logger.getLogger(DetectorUI_V22.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else { 
            jPauseButton.setText("Resume"); 
            StartSearch.resumeThread();
        } 
        
//        Thread.currentThread().interrupt();
        
    }//GEN-LAST:event_jPauseButtonActionPerformed

    private void jStartAnalysisButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jStartAnalysisButtonActionPerformed
        // TODO add your handling code here:
        MyStartAnalysisThread StartAnalysis = new MyStartAnalysisThread();
        new Thread(StartAnalysis).start();
        
    }//GEN-LAST:event_jStartAnalysisButtonActionPerformed

    private void jTrainDataAnalyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTrainDataAnalyButtonActionPerformed
        // TODO add your handling code here:
        if(jSelectAlgrithmComboBox.getSelectedItem().equals("Weighted Algrithm")){
            MyCSVAnalysisThread CSVAnalyThread = new MyCSVAnalysisThread();
            new Thread(CSVAnalyThread).start();
        }else if(jSelectAlgrithmComboBox.getSelectedItem().equals("Modified Weighted Algrithm")){
            MyModifyCVSAnalysisThread ModifyCVSAnalyThread = new MyModifyCVSAnalysisThread();
            new Thread(ModifyCVSAnalyThread).start();
        }
    }//GEN-LAST:event_jTrainDataAnalyButtonActionPerformed

    private void jPRAnalysisButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPRAnalysisButtonActionPerformed
        // TODO add your handling code here:
//        if(evt.getSource() == jPRAnalysisButton){
            if(jSelectAlgrithmComboBox.getSelectedItem().equals("Weighted Algrithm")){
                MyCSVPRAnalysisThread PRAnalysisThread = new MyCSVPRAnalysisThread();
                new Thread(PRAnalysisThread).start();
            }else if(jSelectAlgrithmComboBox.getSelectedItem().equals("Modified Weighted Algrithm")){
                MyCSVModifiedPRAnalysisThread ModifyCSVAnalyThread = new MyCSVModifiedPRAnalysisThread();
                new Thread(ModifyCSVAnalyThread).start();
            }
        
    }//GEN-LAST:event_jPRAnalysisButtonActionPerformed

    private void jModifyAnalyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jModifyAnalyButtonActionPerformed
        // TODO add your handling code here:
        MyModifyAnalysisThread modifyAnalysisThread = new MyModifyAnalysisThread();
        new Thread(modifyAnalysisThread).start();
        
    }//GEN-LAST:event_jModifyAnalyButtonActionPerformed

    private void jRefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRefreshButtonActionPerformed
        // TODO add your handling code here:
        if(evt.getSource() == jRefreshButton){
            jMonitorTextArea.setText("");
        }
        
    }//GEN-LAST:event_jRefreshButtonActionPerformed
    public class MyModifyAnalysisThread implements Runnable {
        public void run(){
            int NumOfPosTweet = 0;
            int NumOfNegTweet = 0;
            int NumOfNeuTweet = 0;
            double[] gaussian = new double[6];
            ArrayList<String> ScoreTweets = new ArrayList<>();
            double sigma = 1.0;
            double gaussian_max = Math.exp(-(1/(sigma*sigma*2)))/(sigma*Math.sqrt(2*Math.PI));
            for (int i = 0; i <= 5; i++){
		gaussian[i] = (double)(1/gaussian_max) * Math.exp(-(((i) / sigma) * ((i) / sigma)) / 2) / (sigma*Math.sqrt(2 * Math.PI));
            }
            
            createDict();
            createModifier();
            createNegation();
            System.out.println("All Created");
            try {
                BufferedReader reader3 = new BufferedReader(new InputStreamReader(new FileInputStream(path + "\\twitterfile\\doc.txt")));
                String line ="";
                TokenizeMachine tokenizeMachine = new TokenizeMachine();
                
                while ((line = reader3.readLine()) != null){
                    ArrayList<String> word = new ArrayList<String>();
                    word = tokenizeMachine.tokenize(line);
                    System.out.println();
					double tempTweet = 0.0;
					int range = 0;
					double negation = 1.0;
					double modifier = 1.0;
					double gauss = 1.0;
					
                    for(int i = 0; i < word.size(); i++){
                        System.out.print(word.get(i)+" ");
                        String token = word.get(i).toLowerCase().trim();  // get token    
                        // get value of token in newDict
                         if(newDict.containsKey(token)){
                            double value = Double.parseDouble(newDict.get(token));
                            double x = Math.abs(word.indexOf(keywordTextField.getText().trim()));  // get query's position in tweet
                            if (Math.abs(x-i) <= 5){    // distance from query to token
                                gauss = value*gaussian[(int)Math.abs(x-i)];
                            }else{
                                gauss = 0.0;
                            }
                               tempTweet +=  negation*modifier*value; 
							}
                           if (negList.contains(word.get(i))){
				negation = -1.0;
				range = 2;
                            }else if(range>1){
				range--;
                            }else{
				negation = 1.0;
                            }
                            modifier = getModifierValue(token, negation);
                            }
                            
                            System.out.println("tempTweet = "+ tempTweet );
                            ScoreTweets.add(Double.toString(tempTweet));
                            if(tempTweet > 0){
                                NumOfPosTweet++;
                                
                            }else if(tempTweet < 0){
                                NumOfNegTweet++;
                                
                            }else{
                                NumOfNeuTweet++;
                            }
                          }
               reader3.close();
            
            } catch (FileNotFoundException ex) {
                Logger.getLogger(DetectorUI_V22.class.getName()).log(Level.SEVERE, null, ex);
            }catch (IOException io){
                Logger.getLogger(DetectorUI_V22.class.getName()).log(Level.SEVERE, null, io);
            }catch (NullPointerException ne){
                Logger.getLogger(DetectorUI_V22.class.getName()).log(Level.SEVERE, null, ne);
            }
            
                for(int i = 0; i < ScoreTweets.size();i++){
                    System.out.println("tweet" +"["+i+"]= " + ScoreTweets.get(i));
                }
			
            jMonitorTextArea.append("# of positive tweets = " + NumOfPosTweet + "\n");
            jMonitorTextArea.append("# of negative tweets = " + NumOfNegTweet + "\n");
            jMonitorTextArea.append("# of netural  tweets = " + NumOfNeuTweet + "\n");
            
           
            barChartplot(NumOfPosTweet,NumOfNegTweet,NumOfNeuTweet);
            
        }
       
    }
   // Precision & Recall Analysis
    public class MyCSVPRAnalysisThread implements Runnable{
        public void run(){ 
            double positiveSumTweets = 0;
            double negativeSumTweets = 0;
            double neutralSumTweets  = 0;
            double OriginPositiveTweets = 0;
            double OriginNegativeTweets = 0;
            double OriginNeutralTweets  = 0;
            double tp = 0;
            double tn = 0;
            double fn = 0;
            double fp = 0;
            double Retrival = Double.parseDouble(jNumberTextField.getText().trim());
            String item = jItemComboBox.getSelectedItem().toString();
            String csvFile = path + "\\twitterfile\\" + "train" + item + ".csv";
            System.out.println(csvFile);
            BufferedReader br = null;
            String line = "";
            String cvsSplitBy = ",";
            ArrayList<String> labelList = new ArrayList<>();
            ArrayList<String> StndLabelList = new ArrayList<>();
            // create sentiment dictionary 
            createDict();
            System.out.println("Dictionary Created");
            //read data from .csv
            try{
                br = new BufferedReader(new FileReader(csvFile));
		while((line = br.readLine()) != null) {
//                    line = br.readLine();
                // use comma as separator
                    String[] term = line.split(cvsSplitBy);
//                    System.out.println("Topic : " + term[0] 
//                                 + " ,Sentiment=" + term[1] + ", Tweet Text: " + term[4]);
                    String label = term[1];
                    label = label.trim().replaceAll("\"", " ");
                    label = label.trim();
                    StndLabelList.add(label);
                
                    if(label.toLowerCase().equals("positive")){
                        OriginPositiveTweets++;
                    }else if(label.equals("negative")){
                        OriginNegativeTweets++;
                    }else{
                        OriginNeutralTweets++;
                    }
                        String tweetCnt = term[4];
//                        System.out.println("tweetCnt: " + tweetCnt);
                        if (tweetCnt.contains("http"))    // remove http
                        {
                            tweetCnt = tweetCnt.replaceAll("http", " ");   
                        }
                        System.out.println("tweetCnt: " + tweetCnt);
                        TokenizeMachine tokenizeMachine = new TokenizeMachine();
                        ArrayList<String> word = new ArrayList<>();
                        word = tokenizeMachine.tokenize(tweetCnt);
                        System.out.println("Tweent Cnt tokenize: ");
                        for(String pWord: word){
                            pWord = removeDuplicates(pWord);      // remove duplicates letters
                            System.out.print("[" + pWord + "]");
                        }
                        System.out.println("\n-----------------------------");
                        double tempTweet = 0;
                    for(int i = 0; i < word.size(); i++){
                        if(newDict.containsKey(word.get(i).toLowerCase().trim())){
                            double value = Double.parseDouble(newDict.get(word.get(i)).trim());
                            if(value > 0){
                                tempTweet +=value;
                            }else{
                                tempTweet +=value;
                        }
                   }
                    }
                    
                    if(tempTweet > 0){
                         positiveSumTweets++;
                         labelList.add("positive");
                    }else if(tempTweet < 0){
                         negativeSumTweets++;
                         labelList.add("negative");
                    }else if(tempTweet == 0){
                         neutralSumTweets++;
                         labelList.add("neutral");
                    }    
                }
                // tp 
                double sum = positiveSumTweets+negativeSumTweets+neutralSumTweets; 
                for (int i = 0; i < Retrival; i++){
                    if(labelList.get(i).equals(StndLabelList.get(i).trim())){
                        tp++;
                    }
                }    
                for (double j= Retrival; j < StndLabelList.size(); j ++){
                    if(labelList.get(i).equals(StndLabelList.get(i).trim())){
                        fn++;
                    }
                }    
                double Relvant = tp  + fn;
                double NoneRelvant = labelList.size() - Relvant;
                fp = Retrival - tp;

                tn = NoneRelvant -fp;
                System.out.println("tn = " + tn);
                System.out.println("Done!");
                   
//                String SumTweets = Double.toString(sum);
                double precision = tp / (tp + fp);
                double recall    = tp / (tp + fn);
                
                
                    double pp = positiveSumTweets / OriginPositiveTweets;
                    double np = negativeSumTweets / OriginNegativeTweets;
                    double ip = neutralSumTweets  / OriginNeutralTweets ;
//                    System.out.println("# of Positive tweets = " + positiveSumTweets);
//                    System.out.println("# of Negative tweets = " + negativeSumTweets);
//                    System.out.println("# of Neutral  tweets = " + neutralSumTweets);
                    jMonitorTextArea.append(jItemComboBox.getSelectedItem().toString() + ": \n");
                    jMonitorTextArea.append("# of Positive tweets = " + positiveSumTweets+"\n");
                    jMonitorTextArea.append("# of Negative tweets = " + negativeSumTweets+"\n");
                    jMonitorTextArea.append("# of Neutral  tweets = " + neutralSumTweets+"\n");
                    
//                    System.out.println("# of Standard Positive tweets = " + OriginPositiveTweets);
//                    System.out.println("# of Standard Negative tweets = " + OriginNegativeTweets);
//                    System.out.println("# of Standard Neutral  tweets = " + OriginNeutralTweets);
                    
                    jMonitorTextArea.append("# of Standard Positive tweets = " + OriginPositiveTweets+"\n");
                    jMonitorTextArea.append("# of Standard Negative tweets = " + OriginNegativeTweets+"\n");
                    jMonitorTextArea.append("# of Standard Neutral  tweets = " + OriginNeutralTweets+"\n");
                    
//                    System.out.println("Positive tweets percentage = " + pp);
//                    System.out.println("Negative tweets percentage = " + np);
//                    System.out.println("Neutral  tweets percentage = " + ip);
//                    jMonitorTextArea.append("Positive tweets percentage = " + pp+"\n");
//                    jMonitorTextArea.append("Negative tweets percentage = " + np+"\n");
//                    jMonitorTextArea.append("Neutral  tweets percentage = " + ip +"\n");
                    jMonitorTextArea.append("Sum = " + Double.toString(sum) +"\n");
                    jMonitorTextArea.append("Retrival = " + jNumberTextField.getText().trim() +"\n");
                    jMonitorTextArea.append("tp = " + tp +"\n");
//                    jMonitorTextArea.append("tn = " + tn +"\n");
                    jMonitorTextArea.append("fp = " + fp +"\n");
                    jMonitorTextArea.append("fn = " + fn +"\n");
                    jMonitorTextArea.append("Precision = " + precision +"\n");
                    jMonitorTextArea.append("recall = " + recall +"\n");
//                    jNumberTextField.setText(" ");
                
                }catch(NumberFormatException nfe){
                    nfe.printStackTrace();
                }catch(ArrayIndexOutOfBoundsException aiobe){
                    aiobe.printStackTrace();
                }catch (IOException e) {
                    e.printStackTrace();
                }finally {
                    if (br == null) {
                            try {
                                    br.close();
                            }catch (IOException e) {
                                    e.printStackTrace();
                            }
                    }
                }
            System.out.println("Data Done");
//            barChartplot(positiveSumTweets,negativeSumTweets,neutralSumTweets,OriginPositiveTweets,OriginNegativeTweets,OriginNeutralTweets);
            
            
        }
        
    }
    
    public class MyCSVModifiedPRAnalysisThread implements Runnable{
        public void run(){ 
            double positiveSumTweets = 0;
            double negativeSumTweets = 0;
            double neutralSumTweets  = 0;
            double OriginPositiveTweets = 0;
            double OriginNegativeTweets = 0;
            double OriginNeutralTweets  = 0;
            double tp = 0;
            double tn = 0;
            double fn = 0;
            double fp = 0;
            double Retrival = Double.parseDouble(jNumberTextField.getText().trim());
            String item = jItemComboBox.getSelectedItem().toString();
            String csvFile = path + "\\twitterfile\\" + "train" + item + ".csv";
            System.out.println(csvFile);
//            BufferedReader br = null;
            String cvsSplitBy = ",";
            ArrayList<String> labelList = new ArrayList<>();
            ArrayList<String> StndLabelList = new ArrayList<>();
            // create sentiment dictionary 
            
            double[] gaussian = new double[6];
            double sigma = 1.0;
            double gaussian_max = Math.exp(-(1/(sigma*sigma*2)))/(sigma*Math.sqrt(2*Math.PI));
            for (int i = 0; i <= 5; i++){
		gaussian[i] = (double)(1/gaussian_max) * Math.exp(-(((i) / sigma) * ((i) / sigma)) / 2) / (sigma*Math.sqrt(2 * Math.PI));
            }
            
            createDict();
            createModifier();
            createNegation();
            System.out.println("All Created");
            
            //read data from .csv
            try{
                
                BufferedReader reader3 = new BufferedReader(new InputStreamReader(new FileInputStream(csvFile)));
                String line ="";
                TokenizeMachine tokenizeMachine = new TokenizeMachine();
                
                while ((line = reader3.readLine()) != null){
                    
                  
                    double tempTweet = 0.0;
                    int range = 0;
                    double negation = 1.0;
                    double modifier = 1.0;
                    double gauss = 1.0;
                    String[] term = line.split(cvsSplitBy);
                    System.out.println(term[1]);
                    String label = term[1];
                    label = label.trim().replaceAll("\"", " ");
                    label = label.trim();
                    StndLabelList.add(label);
                    if(label.toLowerCase().equals("positive")){
                        OriginPositiveTweets++;
                    }else if(label.equals("negative")){
                        OriginNegativeTweets++;
                    }else{
                        OriginNeutralTweets++;
                    }
                    
                    ArrayList<String> word = new ArrayList<String>();
                    String TweetCnt = term[4];
                    word = tokenizeMachine.tokenize(TweetCnt);
					
                    for(int i = 0; i < word.size(); i++){
                        System.out.print(word.get(i)+" ");
                        String token = word.get(i).toLowerCase().trim();  // get token    
                        // get value of token in newDict
                         if(newDict.containsKey(token)){
                            double value = Double.parseDouble(newDict.get(token));
                            double x = Math.abs(word.indexOf(keywordTextField.getText().trim()));  // get query's position in tweet
                            if (Math.abs(x-i) <= 5){    // distance from query to token
                                gauss = value*gaussian[(int)Math.abs(x-i)];
                            }else{
                                gauss = 0.0;
                            }
                               tempTweet +=  negation*modifier*value; 
							}
                           if (negList.contains(word.get(i))){
				negation = -1.0;
				range = 2;
                            }else if(range>1){
				range--;
                            }else{
				negation = 1.0;
                            }
                            modifier = getModifierValue(token, negation);
                            }
                    
                    if(tempTweet > 0){
                         positiveSumTweets++;
                         labelList.add("positive");
                    }else if(tempTweet < 0){
                         negativeSumTweets++;
                         labelList.add("negative");
                    }else if(tempTweet == 0){
                         neutralSumTweets++;
                         labelList.add("neutral");
                    }    
                }
                reader3.close();
                // tp 
                double sum = positiveSumTweets+negativeSumTweets+neutralSumTweets; 
                for (int i = 0; i < Retrival; i++){
                    if(labelList.get(i).equals(StndLabelList.get(i).trim())){
                        tp++;
                    }
                }    
                for (double j= Retrival; j < StndLabelList.size(); j ++){
                    if(labelList.get(i).equals(StndLabelList.get(i).trim())){
                        fn++;
                    }
                }    
                double Relvant = tp  + fn;
                double NoneRelvant = labelList.size() - Relvant;
                fp = Retrival - tp;

                tn = NoneRelvant -fp;
                System.out.println("tn = " + tn);
                System.out.println("Done!");
                   
//                String SumTweets = Double.toString(sum);
                double precision = tp / (tp + fp);
                double recall    = tp / (tp + fn);
                
                
                    double pp = positiveSumTweets / OriginPositiveTweets;
                    double np = negativeSumTweets / OriginNegativeTweets;
                    double ip = neutralSumTweets  / OriginNeutralTweets ;
//                    System.out.println("# of Positive tweets = " + positiveSumTweets);
//                    System.out.println("# of Negative tweets = " + negativeSumTweets);
//                    System.out.println("# of Neutral  tweets = " + neutralSumTweets);
                    jMonitorTextArea.append(jItemComboBox.getSelectedItem().toString() + ": \n");
                    jMonitorTextArea.append("# of Positive tweets = " + positiveSumTweets+"\n");
                    jMonitorTextArea.append("# of Negative tweets = " + negativeSumTweets+"\n");
                    jMonitorTextArea.append("# of Neutral  tweets = " + neutralSumTweets+"\n");
                    
//                    System.out.println("# of Standard Positive tweets = " + OriginPositiveTweets);
//                    System.out.println("# of Standard Negative tweets = " + OriginNegativeTweets);
//                    System.out.println("# of Standard Neutral  tweets = " + OriginNeutralTweets);
                    
                    jMonitorTextArea.append("# of Standard Positive tweets = " + OriginPositiveTweets+"\n");
                    jMonitorTextArea.append("# of Standard Negative tweets = " + OriginNegativeTweets+"\n");
                    jMonitorTextArea.append("# of Standard Neutral  tweets = " + OriginNeutralTweets+"\n");
                    
//                    System.out.println("Positive tweets percentage = " + pp);
//                    System.out.println("Negative tweets percentage = " + np);
//                    System.out.println("Neutral  tweets percentage = " + ip);
//                    jMonitorTextArea.append("Positive tweets percentage = " + pp+"\n");
//                    jMonitorTextArea.append("Negative tweets percentage = " + np+"\n");
//                    jMonitorTextArea.append("Neutral  tweets percentage = " + ip +"\n");
                    jMonitorTextArea.append("Sum = " + Double.toString(sum) +"\n");
                    jMonitorTextArea.append("Retrival = " + jNumberTextField.getText().trim() +"\n");
                    jMonitorTextArea.append("tp = " + tp +"\n");
//                    jMonitorTextArea.append("tn = " + tn +"\n");
                    jMonitorTextArea.append("fp = " + fp +"\n");
                    jMonitorTextArea.append("fn = " + fn +"\n");
                    jMonitorTextArea.append("Precision = " + precision +"\n");
                    jMonitorTextArea.append("recall = " + recall +"\n");
//                    jNumberTextField.setText(" ");
                
                }catch(NumberFormatException nfe){
                    nfe.printStackTrace();
                }catch(ArrayIndexOutOfBoundsException aiobe){
                    aiobe.printStackTrace();
                }catch (IOException e) {
                    e.printStackTrace();
                }finally {
//                    if (br == null) {
//                            try {
//                                    br.close();
//                            }catch (IOException e) {
//                                    e.printStackTrace();
//                            }
//                    }
                }
            System.out.println("Data Done");
//            barChartplot(positiveSumTweets,negativeSumTweets,neutralSumTweets,OriginPositiveTweets,OriginNegativeTweets,OriginNeutralTweets);
            
            
        }
        
    }
    // search result analysis
    public class MyCSVAnalysisThread implements Runnable {
        
        public void run(){ 
            double positiveIndexSum  = 0;
            double negativeIndexSum  = 0;
            double positiveSumTweets = 0;
            double negativeSumTweets = 0;
            double neutralSumTweets  = 0;
            double OriginPositiveTweets = 0;
            double OriginNegativeTweets = 0;
            double OriginNeutralTweets  = 0;
            String item = jItemComboBox.getSelectedItem().toString();
            String csvFile = path + "\\twitterfile\\" + "train" + item + ".csv";
            System.out.println(csvFile);
            BufferedReader br = null;
            String line = "";
            String cvsSplitBy = ",";
            // create sentiment dictionary 
            createDict();
            System.out.println("Dictionary Created");
            //read data from .csv
            try{
                br = new BufferedReader(new FileReader(csvFile));
		while ((line = br.readLine()) != null) {
                // use comma as separator
                    
                    
                    String[] term = line.split(cvsSplitBy);
//                    System.out.println("Topic : " + term[0] 
//                                 + " ,Sentiment=" + term[1] + ", Tweet Text: " + term[4]);
                    String label = term[1];
                    label = label.trim().replaceAll("\"", " ");
                    label = label.trim();
                
                    if(label.toLowerCase().equals("positive")){
//                        System.out.println(label);
                        OriginPositiveTweets++;
                    }else if(label.equals("negative")){
//                        System.out.println(label);
                        OriginNegativeTweets++;
                    }else{
                        OriginNeutralTweets++;
                    }
                        String tweetCnt = term[4];
//                        System.out.println("tweetCnt: " + tweetCnt);
                        if (tweetCnt.contains("http"))    // remove http
                        {
                        tweetCnt = tweetCnt.replaceAll("http", " ");   
                        }
                        System.out.println("tweetCnt: " + tweetCnt);
                        TokenizeMachine tokenizeMachine = new TokenizeMachine();
                        ArrayList<String> word = new ArrayList<>();
                        word = tokenizeMachine.tokenize(tweetCnt);
                        System.out.println("Tweent Cnt tokenize: ");
                        System.out.println("");
                        for(String pWord: word){
                            pWord = removeDuplicates(pWord);      // remove duplicates letters
                            System.out.print("[" + pWord + "]");
                        }
                        System.out.println("\n-----------------------------");
                        double tempTweet = 0;
                    for(int i = 0; i < word.size(); i++){
                        if(newDict.containsKey(word.get(i).toLowerCase().trim())){
                            double value = Double.parseDouble(newDict.get(word.get(i)).trim());
                            if(value > 0){
                                positiveIndexSum += value;
                                tempTweet +=value;
                            }else{
                                negativeIndexSum += value;
                                tempTweet +=value;
                        }
                   }
                    }
                    if(tempTweet > 0){
                         positiveSumTweets++;
                    }else if(tempTweet == 0){
                         neutralSumTweets++;
                    }else{
                         negativeSumTweets++;
                    }    
                }
                System.out.println("Done!");
                    double pp = positiveSumTweets / OriginPositiveTweets;
                    double np = negativeSumTweets / OriginNegativeTweets;
                    double ip = neutralSumTweets  / OriginNeutralTweets ;
                    System.out.println("# of Positive tweets = " + positiveSumTweets);
                    System.out.println("# of Negative tweets = " + negativeSumTweets);
                    System.out.println("# of Neutral  tweets = " + neutralSumTweets);
                    jMonitorTextArea.append(jItemComboBox.getSelectedItem().toString() + ": \n");
                    jMonitorTextArea.append("# of Positive tweets = " + positiveSumTweets+"\n");
                    jMonitorTextArea.append("# of Negative tweets = " + negativeSumTweets+"\n");
                    jMonitorTextArea.append("# of Neutral  tweets = " + neutralSumTweets+"\n");
                    
                    System.out.println("# of Standard Positive tweets = " + OriginPositiveTweets);
                    System.out.println("# of Standard Negative tweets = " + OriginNegativeTweets);
                    System.out.println("# of Standard Neutral  tweets = " + OriginNeutralTweets);
                    
                    jMonitorTextArea.append("# of Standard Positive tweets = " + OriginPositiveTweets+"\n");
                    jMonitorTextArea.append("# of Standard Negative tweets = " + OriginNegativeTweets+"\n");
                    jMonitorTextArea.append("# of Standard Neutral  tweets = " + OriginNeutralTweets+"\n");
                    
                    System.out.println("Positive tweets percentage = " + pp);
                    System.out.println("Negative tweets percentage = " + np);
                    System.out.println("Neutral  tweets percentage = " + ip);
                    jMonitorTextArea.append("Positive tweets percentage = " + pp+"\n");
                    jMonitorTextArea.append("Negative tweets percentage = " + np+"\n");
                    jMonitorTextArea.append("Neutral  tweets percentage = " + ip +"\n");
                
                }catch(NumberFormatException nfe){
                    nfe.printStackTrace();
                }catch(ArrayIndexOutOfBoundsException aiobe){
                    aiobe.printStackTrace();
                }catch (IOException e) {
                    e.printStackTrace();
                }finally {
                    if (br == null) {
                            try {
                                    br.close();
                            }catch (IOException e) {
                                    e.printStackTrace();
                            }
                    }
                }
            System.out.println("Data Done");
            barChartplot(positiveSumTweets,negativeSumTweets,neutralSumTweets,OriginPositiveTweets,OriginNegativeTweets,OriginNeutralTweets);
            
            
        }
        
        public String removeDuplicates(String s) {
        StringBuilder noDupes = new StringBuilder();
        int pos = 0 ;
        int len = s.length();
        int curLen = 0;
        while (pos < len) {
            if (pos == 0 || s.charAt(pos) != s.charAt(pos - 1)) {
                curLen = 1;
            } else {
                ++curLen;
            }
            if (curLen < 3) {
                noDupes.append(s.charAt(pos));
            }
            ++pos;
        }
        return noDupes.toString();
        }
        
        public void barChartplot(double positiveSumTweets,double negativeSumTweets,double neutralSumTweets,
                                 double OriginPositiveTweets, double OriginNegativeTweets,double OriginNeutralTweets){
             DefaultCategoryDataset defaultcategorydataset = new DefaultCategoryDataset();
             
             defaultcategorydataset.setValue(OriginPositiveTweets  , "Standard Score" , "Standard Positive Tweets" + "(" + OriginPositiveTweets +")");
             defaultcategorydataset.setValue(positiveSumTweets , "Test Score", "Positive Tweets"+ "(" + positiveSumTweets +")");
            
             defaultcategorydataset.setValue(OriginNegativeTweets  , "Standard Score" , "Standard Negative Tweets" + "(" + OriginNegativeTweets +")");
             defaultcategorydataset.setValue(negativeSumTweets , "Test Score", "Negative Tweets"+ "(" + negativeSumTweets +")");
             
             defaultcategorydataset.setValue(OriginNeutralTweets   , "Standard Score" , "Standard Neutral Tweets" + "(" + OriginNeutralTweets +")");
             defaultcategorydataset.setValue(neutralSumTweets  , "Test Score" , "Neutral Tweets" + "(" + neutralSumTweets +")");
             double sum = positiveSumTweets+negativeSumTweets+neutralSumTweets;       
             String SumTweets = Double.toString(sum);
                
                    // create bar chart
                        JFreeChart chart3 = ChartFactory.createBarChart("Total number of Tweets "+ "(" + jItemComboBox.getSelectedItem().toString() +") is " + SumTweets ,  // chart title
                                                                         "Type",   //title of X-axis
                                                                         "Number",   // title of Y-axis
                                                                         defaultcategorydataset,  //dataset
                                                                         PlotOrientation.VERTICAL,  // plot orientation
                                                                         true,     // legend?
                                                                         true,      //tooltips?
                                                                         false);    // url?
                        chart3.setBackgroundPaint(Color.white);
                        CategoryPlot barplot = (CategoryPlot) chart3.getPlot();
                        barplot.getColumnRenderingOrder();
                        barplot.setBackgroundPaint(Color.white);
                        barplot.setDomainGridlinePaint(Color.black);
                        barplot.setRangeGridlinePaint(Color.black);
                        barplot.setNoDataMessageFont(new Font("Serif",2, 10));
                        barplot.setNoDataMessagePaint(Color.BLUE);
                        barplot.setRangeGridlinesVisible(true);
                        barplot.setDomainGridlinesVisible(true);
                        
                        
                        /*  
                         * X- axis setting 
                         */  
                        CategoryAxis domainAxis = barplot.getDomainAxis();
//                        domainAxis.setLabelFont(new Font("Simsun", Font.BOLD, 12));
                        domainAxis.setTickLabelFont(new Font("Tahoma", Font.BOLD, 12));   
                        domainAxis.setLowerMargin(0.03f);
                        domainAxis.setUpperMargin(0.01f);
                        //这里设置横轴标签可显示行数，在数据集的横轴字符串上用\n可实现标签字符垂直 
                        domainAxis.setMaximumCategoryLabelLines(255); 
                        domainAxis.setCategoryLabelPositionOffset(3);
                        domainAxis.setCategoryMargin(0.3f);
                        //设置柱子
                        BarRenderer renderer = (BarRenderer)barplot.getRenderer();
                        renderer.setItemMargin(0.0);
//                        barplot.setRenderer(renderer);
                        ChartFrame cframe3 = new ChartFrame("Tweets data volume",chart3);
                        //                        cframe3.pack();
                        cframe3.setVisible(true);
                        cframe3.pack();
                        cframe3.setSize(550, 550);
        }
        
  }
    public class MyModifyCVSAnalysisThread implements Runnable{
        public void run(){ 
            double positiveSumTweets = 0;
            double negativeSumTweets = 0;
            double neutralSumTweets  = 0;
            double OriginPositiveTweets = 0;
            double OriginNegativeTweets = 0;
            double OriginNeutralTweets  = 0;
            double tp = 0;
            double tn = 0;
            double fn = 0;
            double fp = 0;
//            double Retrival = Double.parseDouble(jNumberTextField.getText().trim());
            String item = jItemComboBox.getSelectedItem().toString();
            String csvFile = path + "\\twitterfile\\" + "train" + item + ".csv";
            System.out.println(csvFile);
//            BufferedReader br = null;
            String cvsSplitBy = ",";
            ArrayList<String> labelList = new ArrayList<>();
            ArrayList<String> StndLabelList = new ArrayList<>();
            // create sentiment dictionary 
            
            double[] gaussian = new double[6];
            double sigma = 1.0;
            double gaussian_max = Math.exp(-(1/(sigma*sigma*2)))/(sigma*Math.sqrt(2*Math.PI));
            for (int i = 0; i <= 5; i++){
		gaussian[i] = (double)(1/gaussian_max) * Math.exp(-(((i) / sigma) * ((i) / sigma)) / 2) / (sigma*Math.sqrt(2 * Math.PI));
            }
            
            createDict();
            createModifier();
            createNegation();
            System.out.println("All Created");
            
            //read data from .csv
            try{
                
                BufferedReader reader3 = new BufferedReader(new InputStreamReader(new FileInputStream(csvFile)));
                String line ="";
                TokenizeMachine tokenizeMachine = new TokenizeMachine();
                
                while ((line = reader3.readLine()) != null){
                    
                  
                    double tempTweet = 0.0;
                    int range = 0;
                    double negation = 1.0;
                    double modifier = 1.0;
                    double gauss = 1.0;
                    String[] term = line.split(cvsSplitBy);
                    System.out.println(term[1]);
                    String label = term[1];
                    label = label.trim().replaceAll("\"", " ");
                    label = label.trim();
                    StndLabelList.add(label);
                    if(label.toLowerCase().equals("positive")){
                        OriginPositiveTweets++;
                    }else if(label.equals("negative")){
                        OriginNegativeTweets++;
                    }else{
                        OriginNeutralTweets++;
                    }
                    
                    ArrayList<String> word = new ArrayList<String>();
                    String TweetCnt = term[4];
                    word = tokenizeMachine.tokenize(TweetCnt);
					
                    for(int i = 0; i < word.size(); i++){
                        System.out.print(word.get(i)+" ");
                        String token = word.get(i).toLowerCase().trim();  // get token    
                        // get value of token in newDict
                         if(newDict.containsKey(token)){
                            double value = Double.parseDouble(newDict.get(token));
                            double x = Math.abs(word.indexOf(keywordTextField.getText().trim()));  // get query's position in tweet
                            if (Math.abs(x-i) <= 5){    // distance from query to token
                                gauss = value*gaussian[(int)Math.abs(x-i)];
                            }else{
                                gauss = 0.0;
                            }
                               tempTweet +=  negation*modifier*value; 
							}
                           if (negList.contains(word.get(i))){
				negation = -1.0;
				range = 2;
                            }else if(range>1){
				range--;
                            }else{
				negation = 1.0;
                            }
                            modifier = getModifierValue(token, negation);
                            }
                    
                    if(tempTweet > 0){
                         positiveSumTweets++;
                         labelList.add("positive");
                    }else if(tempTweet < 0){
                         negativeSumTweets++;
                         labelList.add("negative");
                    }else if(tempTweet == 0){
                         neutralSumTweets++;
                         labelList.add("neutral");
                    }    
                }
                reader3.close();
                // tp 
                double sum = positiveSumTweets+negativeSumTweets+neutralSumTweets; 
//                for (int i = 0; i < Retrival; i++){
//                    if(labelList.get(i).equals(StndLabelList.get(i).trim())){
//                        tp++;
//                    }
//                }    
//                for (double j= Retrival; j < StndLabelList.size(); j ++){
//                    if(labelList.get(i).equals(StndLabelList.get(i).trim())){
//                        fn++;
//                    }
//                }    
//                double Relvant = tp  + fn;
//                double NoneRelvant = labelList.size() - Relvant;
//                fp = Retrival - tp;

//                tn = NoneRelvant -fp;
//                System.out.println("tn = " + tn);
                System.out.println("Done!");
                   
//                String SumTweets = Double.toString(sum);
                double precision = tp / (tp + fp);
                double recall    = tp / (tp + fn);
                
                
                    double pp = positiveSumTweets / OriginPositiveTweets;
                    double np = negativeSumTweets / OriginNegativeTweets;
                    double ip = neutralSumTweets  / OriginNeutralTweets ;
//                    System.out.println("# of Positive tweets = " + positiveSumTweets);
//                    System.out.println("# of Negative tweets = " + negativeSumTweets);
//                    System.out.println("# of Neutral  tweets = " + neutralSumTweets);
                    jMonitorTextArea.append(jItemComboBox.getSelectedItem().toString() + ": \n");
                    jMonitorTextArea.append("# of Positive tweets = " + positiveSumTweets+"\n");
                    jMonitorTextArea.append("# of Negative tweets = " + negativeSumTweets+"\n");
                    jMonitorTextArea.append("# of Neutral  tweets = " + neutralSumTweets+"\n");
                    
//                    System.out.println("# of Standard Positive tweets = " + OriginPositiveTweets);
//                    System.out.println("# of Standard Negative tweets = " + OriginNegativeTweets);
//                    System.out.println("# of Standard Neutral  tweets = " + OriginNeutralTweets);
                    
                    jMonitorTextArea.append("# of Standard Positive tweets = " + OriginPositiveTweets+"\n");
                    jMonitorTextArea.append("# of Standard Negative tweets = " + OriginNegativeTweets+"\n");
                    jMonitorTextArea.append("# of Standard Neutral  tweets = " + OriginNeutralTweets+"\n");
                    
//                    System.out.println("Positive tweets percentage = " + pp);
//                    System.out.println("Negative tweets percentage = " + np);
//                    System.out.println("Neutral  tweets percentage = " + ip);
//                    jMonitorTextArea.append("Positive tweets percentage = " + pp+"\n");
//                    jMonitorTextArea.append("Negative tweets percentage = " + np+"\n");
//                    jMonitorTextArea.append("Neutral  tweets percentage = " + ip +"\n");
                    jMonitorTextArea.append("Sum = " + Double.toString(sum) +"\n");
                    jMonitorTextArea.append("Retrival = " + jNumberTextField.getText().trim() +"\n");
                    jMonitorTextArea.append("tp = " + tp +"\n");
//                    jMonitorTextArea.append("tn = " + tn +"\n");
                    jMonitorTextArea.append("fp = " + fp +"\n");
                    jMonitorTextArea.append("fn = " + fn +"\n");
                    jMonitorTextArea.append("Precision = " + precision +"\n");
                    jMonitorTextArea.append("recall = " + recall +"\n");
//                    jNumberTextField.setText(" ");
                
                }catch(NumberFormatException nfe){
                    nfe.printStackTrace();
                }catch(ArrayIndexOutOfBoundsException aiobe){
                    aiobe.printStackTrace();
                }catch (IOException e) {
                    e.printStackTrace();
                }finally {
//                    if (br == null) {
//                            try {
//                                    br.close();
//                            }catch (IOException e) {
//                                    e.printStackTrace();
//                            }
//                    }
                }
            System.out.println("Data Done");
            barChartplot(positiveSumTweets,negativeSumTweets,neutralSumTweets,OriginPositiveTweets,OriginNegativeTweets,OriginNeutralTweets);
            
            
        }
        
    }
    public class MyStartAnalysisThread implements Runnable {
        

        public void pieChartplot(int positiveIndexSum, int negativeIndexSum){
            //**********************************************************************************
            //plot confidence pie chart
            //**********************************************************************************
           
            DefaultPieDataset pieDataset= new DefaultPieDataset();
                    
                   pieDataset.setValue("positive Index", positiveIndexSum); 
                   pieDataset.setValue("negative Index", negativeIndexSum);
                   
                    JFreeChart chart1 = ChartFactory.createPieChart("Sentiment Index Chart" +  "(" + keywordTextField.getText() +")", pieDataset, true, true, false);
                    PiePlot p1 = (PiePlot) chart1.getPlot();
                    p1.setSectionOutlinesVisible(true);
                    p1.setBackgroundPaint(Color.white);
                    p1.setLabelGenerator(new StandardPieSectionLabelGenerator(
                        "   {0}({2})", NumberFormat.getNumberInstance(), new DecimalFormat("0.00%")));
                    ChartFrame cframe1 = new ChartFrame("Sentiment Index Chart", chart1);
                    cframe1.setVisible(true);
                    cframe1.setSize(550, 550);
        }
        
        public void barChartplot(int positiveSumTweets,int negativeSumTweets,int neutralSumTweets){
             DefaultCategoryDataset defaultcategorydataset = new DefaultCategoryDataset();
             defaultcategorydataset.setValue(positiveSumTweets , "Positive Tweets", "Positive Tweets"+ "(" + positiveSumTweets +")");
             defaultcategorydataset.setValue(negativeSumTweets , "Negative Tweets", "Negative Tweets"+ "(" + negativeSumTweets +")");
             defaultcategorydataset.setValue(neutralSumTweets  , "Neutral Tweets" , "Neutral Tweets" + "(" + neutralSumTweets +")");
                    
             String SumTweets = Integer.toString(positiveSumTweets+negativeSumTweets+neutralSumTweets);
                
                    // create bar chart
                        JFreeChart chart3 = ChartFactory.createBarChart("Total number of Tweets "+ "(" + keywordTextField.getText() +") is " + SumTweets ,  // chart title
                                                                         "Type",   //title of X-axis
                                                                         "Number",   // title of Y-axis
                                                                         defaultcategorydataset,  //dataset
                                                                         PlotOrientation.VERTICAL,  // plot orientation
                                                                         true,     // legend?
                                                                         true,      //tooltips?
                                                                         false);    // url?
                        chart3.setBackgroundPaint(Color.white);
                        CategoryPlot barplot = (CategoryPlot) chart3.getPlot();
                        barplot.getColumnRenderingOrder();
                        barplot.setBackgroundPaint(Color.white);
                        barplot.setDomainGridlinePaint(Color.black);
                        barplot.setRangeGridlinePaint(Color.black);
                        barplot.setNoDataMessageFont(new Font("Serif",2, 10));
                        barplot.setNoDataMessagePaint(Color.BLUE);
                        barplot.setRangeGridlinesVisible(true);
                        barplot.setDomainGridlinesVisible(true);
                        
                        /*  
                         * X- axis setting 
                         */  
                        CategoryAxis domainAxis = barplot.getDomainAxis();
//                        domainAxis.setLabelFont(new Font("Simsun", Font.BOLD, 12));
                        domainAxis.setTickLabelFont(new Font("Tahoma", Font.BOLD, 14));   
                        domainAxis.setLowerMargin(0.03f);
                        //这里设置横轴标签可显示行数，在数据集的横轴字符串上用\n可实现标签字符垂直 
                        domainAxis.setMaximumCategoryLabelLines(255); 
                        domainAxis.setCategoryLabelPositionOffset(3);
                        
                        ChartFrame cframe3 = new ChartFrame("Tweets data volume",chart3);
                        //                        cframe3.pack();
                        cframe3.setVisible(true);
                        cframe3.setSize(550, 550);
        }
        
        public void run(){
            BufferedReader reader2 = null;
            int positiveIndexSum  = 0;
            int negativeIndexSum  = 0;
            int positiveSumTweets = 0;
            int negativeSumTweets = 0;
            int neutralSumTweets  = 0;
            ArrayList<String> positiveList = null;
            ArrayList<String> negativeList = null;
            ArrayList<String> neutralList  = null;
            
            
            createDict();
            System.out.println("Dict created");
        
            try {
                reader2 = new BufferedReader(new InputStreamReader(new FileInputStream(path + "\\twitterfile\\doc.txt")));
                String line ="";
                TokenizeMachine tokenizeMachine = new TokenizeMachine();
                while ((line = reader2.readLine()) != null){
//                String lineCode = Integer.toString(line.hashCode());
//                    System.out.println(line);
                    ArrayList<String> terms = new ArrayList<String>();
                    terms = tokenizeMachine.tokenize(line);
                int temp = 0;      // to sum the value of one tweet
//                String[] terms = line.split(" ");
                for(i=0; i < terms.size(); i++){
                    if(newDict.containsKey(terms.get(i).toLowerCase().trim())){
                        double value = Double.parseDouble(newDict.get(terms.get(i)));
                        if(value > 0){
                            positiveIndexSum += value;
                            temp +=value;
//                            positiveList.add(lineCode);
                        }else{
                            negativeIndexSum += value;
                            temp +=value;
//                            negativeList.add(lineCode);
                            
                        }
                   }else{
//                        neturalList.add(lineCode);
                    }
                }
                if(temp < 0){
                    positiveSumTweets++;
                }else if(temp == 0){
                    neutralSumTweets++;
                }else{
                    negativeSumTweets++;
                }
                
            }
                reader2.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(DetectorUI_V22.class.getName()).log(Level.SEVERE, null, ex);
            }catch (IOException io){
                Logger.getLogger(DetectorUI_V22.class.getName()).log(Level.SEVERE, null, io);
            }catch (NullPointerException ne){
                Logger.getLogger(DetectorUI_V22.class.getName()).log(Level.SEVERE, null, ne);
            }
            jMonitorTextArea.append("# of positive tweets = " + positiveSumTweets + "\n");
            jMonitorTextArea.append("# of negative tweets = " + negativeSumTweets + "\n");
            jMonitorTextArea.append("# of netural  tweets = " + neutralSumTweets + "\n");
            jMonitorTextArea.append("Index of positive tweets = " + positiveIndexSum + "\n");
            jMonitorTextArea.append("Index of negative tweets = " + negativeIndexSum + "\n");
            pieChartplot(positiveIndexSum,negativeIndexSum*(-1));
            barChartplot(positiveSumTweets,negativeSumTweets,neutralSumTweets);
        }
        
    }
    // search thread
    public class MySearchNewThread implements Runnable{
        
        public void run(){
                if(!keywordTextField.getText().equals("")){
            
        try {
            System.out.println("path: " + path);
            
            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new DataOutputStream(new FileOutputStream(path + "\\twitterfile\\doc.txt"))));
            
            ConfigurationBuilder cb = new ConfigurationBuilder();
            cb.setJSONStoreEnabled(true);
            cb.setDebugEnabled(true)
              .setOAuthConsumerKey("fo3UiFgvkiLvUvUl0kg")
              .setOAuthConsumerSecret("yASNDZme4ljGCUHi514nXKu2WjcJOORyMNrMW3SM")
              .setOAuthAccessToken("1411893078-dBogYQQ68cggtfIntwANoWRTss2S4SwQZeUEazB")
              .setOAuthAccessTokenSecret("IBTIQAGfjE9gUOtiI8VKM1MwL9GP7li0bZebyle1btI");
            Twitter twitter = new TwitterFactory(cb.build()).getInstance();
            try {
                Query query = new Query(keywordTextField.getText());
                QueryResult result;
                int i = 1;
         
                do {
                    result = twitter.search(query);
                    List<Status> tweets = result.getTweets();
                    for (Status tweet : tweets) {
//                            System.out.println("User: " + tweet.);
//                            System.out.println("GEO Location: " + tweet.getGeoLocation());
//                            System.out.println("Current User Retweet ID : " + tweet.getCurrentUserRetweetId());
//                            System.out.println("Place: " + tweet.getPlace());
//                            String json = DataObjectFactory.getRawJSON(tweet);
//                            System.out.println("content" + json );
//                            System.out.println("______________________________________");
                            jResultTextArea.append("[" + i + "] " +tweet.getText().replace('\n', ' ')+"\n");
                            String line = tweet.getText().replace('\n', ' ');
//                            line = line.substring(line.indexOf("@"));
//                            line = line.toLowerCase();
//                            line = line.replaceAll("[^a-z\\sA-Z]", " ");
//                            line = line.replaceAll("( )", " ").trim();
                            line = line.trim().replaceAll("\t", " ")+ "\n";
                            bw.write(line);
                            i++;
                    }
//                    for(Tweet tweet : result.getTweets()){
//                        
//                    }
                } while ((query = result.nextQuery()) != null && running && counter);
               
//                System.exit(0);
            } catch (TwitterException te) {
                te.printStackTrace();
                System.out.println("Failed to search tweets: " + te.getMessage());
//                System.exit(-1);
            }
            bw.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DetectorUI_V22.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DetectorUI_V22.class.getName()).log(Level.SEVERE, null, ex);
        } 
        
        }else{
            JOptionPane.showMessageDialog(CrawlerPanel, "Please type keywords!!!!","Error warning",JOptionPane.WARNING_MESSAGE);
            
        }
            }
        public void pauseThread() throws InterruptedException{
            running = false;
        }
        
        public void resumeThread(){
            running = true;
        }
        public void numberToLimite(){
            if(i >=100){
               counter = false;
            }
        }
    }
    // Dict Modifer  Negation
    private void createDict(){
            newDict =new HashMap<String,String>();
        try{
            BufferedReader reader1 = new BufferedReader(new InputStreamReader(new FileInputStream(path +"\\goldenstandard.txt")));
            String line ="";
            while ((line = reader1.readLine()) != null){
                String[] terms = line.split("\t");
                newDict.put(terms[0].trim(), terms[1].trim());
            }
            reader1.close();
            
            }catch (FileNotFoundException ex) {
                Logger.getLogger(DetectorUI_V22.class.getName()).log(Level.SEVERE, null, ex);
            }catch (IOException io){
                Logger.getLogger(DetectorUI_V22.class.getName()).log(Level.SEVERE, null, io);
            }catch (NullPointerException ne){
                Logger.getLogger(DetectorUI_V22.class.getName()).log(Level.SEVERE, null, ne);
            }
             
        }
    private void createModifier() {
            modifiers =new HashMap<>();
        try{
            BufferedReader reader1 = new BufferedReader(new InputStreamReader(new FileInputStream(path +"\\modifiers.txt")));
            String line ="";
            while ((line = reader1.readLine()) != null){
                String[] terms = line.split(":");
                modifiers.put(terms[0].trim(), terms[1].trim());
            }
            reader1.close();
            
            }catch (FileNotFoundException ex) {
                Logger.getLogger(DetectorUI_V22.class.getName()).log(Level.SEVERE, null, ex);
            }catch (IOException io){
                Logger.getLogger(DetectorUI_V22.class.getName()).log(Level.SEVERE, null, io);
            }catch (NullPointerException ne){
                Logger.getLogger(DetectorUI_V22.class.getName()).log(Level.SEVERE, null, ne);
            }
             
        }
    private void createNegation(){
        try{
            negList = new ArrayList<>();
            BufferedReader reader1 = new BufferedReader(new InputStreamReader(new FileInputStream(path +"\\negations.txt")));
            String line ="";
            while ((line = reader1.readLine()) != null){
                negList.add(line.trim());
//                System.out.println(line.trim());
            }
            reader1.close();
            
            }catch (FileNotFoundException ex) {
                Logger.getLogger(DetectorUI_V22.class.getName()).log(Level.SEVERE, null, ex);
            }catch ( IOException | NullPointerException io){
                Logger.getLogger(DetectorUI_V22.class.getName()).log(Level.SEVERE, null, io);
            }
        }
    private double getModifierValue(String token, Double negation)
    {
        double m;
        if (modifiers.containsKey(token)){
            m = Double.parseDouble(modifiers.get(token).trim());
            if ((negation == -1.0) && (m == 2)){
                m = 0.8;
            }
        } else{
            m = 1.0;
        }
        return m;
    }
    // bar chart plot class
    public void barChartplot(int positiveSumTweets,int negativeSumTweets,int neutralSumTweets){
             DefaultCategoryDataset defaultcategorydataset = new DefaultCategoryDataset();
             defaultcategorydataset.setValue(positiveSumTweets , "Positive Tweets", "Positive Tweets"+ "(" + positiveSumTweets +")");
             defaultcategorydataset.setValue(negativeSumTweets , "Negative Tweets", "Negative Tweets"+ "(" + negativeSumTweets +")");
             defaultcategorydataset.setValue(neutralSumTweets  , "Neutral Tweets" , "Neutral Tweets" + "(" + neutralSumTweets +")");
                    
             String SumTweets = Integer.toString(positiveSumTweets+negativeSumTweets+neutralSumTweets);
                
                    // create bar chart
                        JFreeChart chart3 = ChartFactory.createBarChart("Total number of Tweets "+ "(" + keywordTextField.getText() +") is " + SumTweets ,  // chart title
                                                                         "Type",   //title of X-axis
                                                                         "Number",   // title of Y-axis
                                                                         defaultcategorydataset,  //dataset
                                                                         PlotOrientation.VERTICAL,  // plot orientation
                                                                         true,     // legend?
                                                                         true,      //tooltips?
                                                                         false);    // url?
                        chart3.setBackgroundPaint(Color.white);
                        CategoryPlot barplot = (CategoryPlot) chart3.getPlot();
                        barplot.getColumnRenderingOrder();
                        barplot.setBackgroundPaint(Color.white);
                        barplot.setDomainGridlinePaint(Color.black);
                        barplot.setRangeGridlinePaint(Color.black);
                        barplot.setNoDataMessageFont(new Font("Serif",2, 10));
                        barplot.setNoDataMessagePaint(Color.BLUE);
                        barplot.setRangeGridlinesVisible(true);
                        barplot.setDomainGridlinesVisible(true);
                        
                        /*  
                         * X- axis setting 
                         */  
                        CategoryAxis domainAxis = barplot.getDomainAxis();
//                        domainAxis.setLabelFont(new Font("Simsun", Font.BOLD, 12));
                        domainAxis.setTickLabelFont(new Font("Tahoma", Font.BOLD, 14));   
                        domainAxis.setLowerMargin(0.03f);
                        //这里设置横轴标签可显示行数，在数据集的横轴字符串上用\n可实现标签字符垂直 
                        domainAxis.setMaximumCategoryLabelLines(255); 
                        domainAxis.setCategoryLabelPositionOffset(3);
                        
                        ChartFrame cframe3 = new ChartFrame("Tweets data volume",chart3);
                        //                        cframe3.pack();
                        cframe3.setVisible(true);
                        cframe3.setSize(550, 550);
        }
    public void barChartplot(double positiveSumTweets,double negativeSumTweets,double neutralSumTweets,
                                 double OriginPositiveTweets, double OriginNegativeTweets,double OriginNeutralTweets){
             DefaultCategoryDataset defaultcategorydataset = new DefaultCategoryDataset();
             
             defaultcategorydataset.setValue(OriginPositiveTweets  , "Standard Score" , "Standard Positive Tweets" + "(" + OriginPositiveTweets +")");
             defaultcategorydataset.setValue(positiveSumTweets , "Test Score", "Positive Tweets"+ "(" + positiveSumTweets +")");
            
             defaultcategorydataset.setValue(OriginNegativeTweets  , "Standard Score" , "Standard Negative Tweets" + "(" + OriginNegativeTweets +")");
             defaultcategorydataset.setValue(negativeSumTweets , "Test Score", "Negative Tweets"+ "(" + negativeSumTweets +")");
             
             defaultcategorydataset.setValue(OriginNeutralTweets   , "Standard Score" , "Standard Neutral Tweets" + "(" + OriginNeutralTweets +")");
             defaultcategorydataset.setValue(neutralSumTweets  , "Test Score" , "Neutral Tweets" + "(" + neutralSumTweets +")");
             double sum = positiveSumTweets+negativeSumTweets+neutralSumTweets;       
             String SumTweets = Double.toString(sum);
                
                    // create bar chart
                        JFreeChart chart3 = ChartFactory.createBarChart("Total number of Tweets "+ "(" + jItemComboBox.getSelectedItem().toString() +") is " + SumTweets +
                                                                            "\n number of Retrival Tweets is" + jNumberTextField.getText(),  // chart title
                                                                         "Type",   //title of X-axis
                                                                         "Number",   // title of Y-axis
                                                                         defaultcategorydataset,  //dataset
                                                                         PlotOrientation.VERTICAL,  // plot orientation
                                                                         true,     // legend?
                                                                         true,      //tooltips?
                                                                         false);    // url?
                        chart3.setBackgroundPaint(Color.white);
                        CategoryPlot barplot = (CategoryPlot) chart3.getPlot();
                        barplot.getColumnRenderingOrder();
                        barplot.setBackgroundPaint(Color.white);
                        barplot.setDomainGridlinePaint(Color.black);
                        barplot.setRangeGridlinePaint(Color.black);
                        barplot.setNoDataMessageFont(new Font("Serif",2, 10));
                        barplot.setNoDataMessagePaint(Color.BLUE);
                        barplot.setRangeGridlinesVisible(true);
                        barplot.setDomainGridlinesVisible(true);
                        
                        
                        /*  
                         * X- axis setting 
                         */  
                        CategoryAxis domainAxis = barplot.getDomainAxis();
//                        domainAxis.setLabelFont(new Font("Simsun", Font.BOLD, 12));
                        domainAxis.setTickLabelFont(new Font("Tahoma", Font.BOLD, 12));   
                        domainAxis.setLowerMargin(0.03f);
                        domainAxis.setUpperMargin(0.01f);
                        //这里设置横轴标签可显示行数，在数据集的横轴字符串上用\n可实现标签字符垂直 
                        domainAxis.setMaximumCategoryLabelLines(255); 
                        domainAxis.setCategoryLabelPositionOffset(3);
                        domainAxis.setCategoryMargin(0.3f);
                        //设置柱子
                        BarRenderer renderer = (BarRenderer)barplot.getRenderer();
                        renderer.setItemMargin(0.0);
                        barplot.setRenderer(renderer);
                        ChartFrame cframe3 = new ChartFrame("Tweets data volume",chart3);
                        //                        cframe3.pack();
                        cframe3.setVisible(true);
                        cframe3.pack();
                        cframe3.setSize(550, 550);
        }
        
    public String removeDuplicates(String s) {
        StringBuilder noDupes = new StringBuilder();
        int pos = 0 ;
        int len = s.length();
        int curLen = 0;
        while (pos < len) {
            if (pos == 0 || s.charAt(pos) != s.charAt(pos - 1)) {
                curLen = 1;
            } else {
                ++curLen;
            }
            if (curLen < 3) {
                noDupes.append(s.charAt(pos));
            }
            ++pos;
        }
        return noDupes.toString();
        }
            
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DetectorUI_V22.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DetectorUI_V22.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DetectorUI_V22.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DetectorUI_V22.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DetectorUI_V22().setVisible(true);
            }
        });
    }
    MySearchNewThread StartSearch = new MySearchNewThread();
    
    String path = System.getProperty("user.dir");
    ArrayList<String> negList;
    private Map<String,String> newDict = null;
    private Map<String,String> modifiers = null;
//    private Dictionary dict;
    private volatile boolean running = true;
    private volatile boolean counter = true;
    private int i = 1;
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CrawlerPanel;
    private javax.swing.JPanel RetrivalPanel;
    private javax.swing.JPanel SentimentAnalysisPanel;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox jItemComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton jModifyAnalyButton;
    private javax.swing.JTextArea jMonitorTextArea;
    private javax.swing.JTextField jNumberTextField;
    private javax.swing.JButton jPRAnalysisButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JButton jPauseButton;
    private javax.swing.JButton jRefreshButton;
    private javax.swing.JTextArea jResultTextArea;
    private javax.swing.JTextArea jRetrivalResultTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JButton jSearchButton;
    private javax.swing.JComboBox jSelectAlgrithmComboBox;
    private javax.swing.JButton jStartAnalysisButton;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton jTrainDataAnalyButton;
    private javax.swing.JTextField keywordTextField;
    // End of variables declaration//GEN-END:variables
}
